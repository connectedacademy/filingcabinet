image: docker:git
services:
- docker:dind

stages:
- build
- test
- deploy

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY/$CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY/$CI_REGISTRY_IMAGE:latest

before_script:
  - docker login -u gitlab-ci-token -p "$CI_BUILD_TOKEN"" $CI_REGISTRY

build:
  stage: build
  script:
    - docker build -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE

test:
  stage: test
  script:
    - docker run $CONTAINER_TEST_IMAGE npm test

# release-image:
#   stage: release
#   script:
#     - docker pull $CONTAINER_TEST_IMAGE
#     - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
#     - docker push $CONTAINER_RELEASE_IMAGE
#   only:
#     - master

deploy-aws:
  stage: deploy
  environment: amazonlive
  image: ruby:latest
  when: manual
  script:
  - gem install dpl
  - dpl --provider=elasticbeanstalk --access-key-id=<access-key-id> --secret-access-key="<secret-access-key>" --app="example-app-name" --env="example-app-environment" --region="us-west-2"
  only:
  - master


















image: docker:latest

services:
  - docker:dind

stages:
  - build
  - test
  - deploy

build-container:
  stage: build
  tags:
    - docker
  script:
    - export IMAGE_TAG=$(echo -en $CI_BUILD_REF_NAME | tr -c '[:alnum:]_.-' '-')
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$IMAGE_TAG" .
    - docker push "$CI_REGISTRY_IMAGE:$IMAGE_TAG"

test:
  stage: test
  image: $CI_REGISTRY_IMAGE:$IMAGE_TAG
  script:
    - node 

deploy-aws:
  environment: production
  image: ruby:latest
  stage: deploy
  script:
  - gem install dpl
  - dpl --provider=elasticbeanstalk --access-key-id=<access-key-id> --secret-access-key="<secret-access-key>" --app="example-app-name" --env="example-app-environment" --region="us-west-2"
  only:
  - master